<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>OrionWang</title>
  
  <subtitle>Blog</subtitle>
  <link href="https://www.orionwang.com/atom.xml" rel="self"/>
  
  <link href="https://www.orionwang.com/"/>
  <updated>2024-08-21T11:48:31.261Z</updated>
  <id>https://www.orionwang.com/</id>
  
  <author>
    <name>orionwang</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>插件</title>
    <link href="https://www.orionwang.com/posts/null/"/>
    <id>https://www.orionwang.com/posts/null/</id>
    <published>2024-08-20T03:07:33.000Z</published>
    <updated>2024-08-21T11:48:31.261Z</updated>
    
    <content type="html"><![CDATA[<h2 id="背景介绍"><a href="#背景介绍" class="headerlink" title="背景介绍"></a>背景介绍</h2><p>在即刻上发了我使用 ChatGPT 开发的浏览器插件“Bossfinder-一键快速搜公司”，有网友在求教程，趁着周末有空，就写个教程来记录下自己是如何使用 ChatGPT 来开发这个插件的。本教程面向对开发浏览器插件感兴趣，但是无代码经验的人，我会一步一步的展示我是如何开发这个插件的，欢迎大家转发收藏。</p><h3 id="本文目标"><a href="#本文目标" class="headerlink" title="本文目标"></a>本文目标</h3><p><strong>以“Bossfinder-一键快速搜公司”为例，展示零代码经验如何使用ChatGPT 来开发一个简单的浏览器插件，为对浏览器拓展感兴趣的同学一些参考</strong>。</p><p>正式开始之前，对浏览器拓展更多信息感兴趣的同学，可以看下下面chrome 官方对浏览器拓展的定义。当然不感兴趣的，可以跳过。</p><p><strong>Google 对于浏览器拓展的官方定义是：Chrome 扩展程序通过自定义用户界面、观察浏览器事件和修改网页来增强浏览体验</strong>。您可以使用与创建 Web 应用程序相同的 Web 技术来构建扩展： <a href="https://web.dev/learn/html">HTML</a> 、 <a href="https://web.dev/learn/css">CSS</a>和<a href="https://developer.mozilla.org/docs/Learn/JavaScript">JavaScript</a>。除了<a href="https://developer.mozilla.org/docs/Web/API">Web API</a>之外，扩展程序还可以访问<a href="https://developer.chrome.com/docs/extensions/reference">Chrome 扩展程序 API</a>来完成不同的任务。这里是：Google chrome 拓展的官方文档<a href="https://developer.chrome.com/docs/extensions">Chrome Extensions  |  Chrome for Developers</a>，愿意了解更多的信息的，可以点进去看看。</p><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><h3 id="工具和环境设置"><a href="#工具和环境设置" class="headerlink" title="工具和环境设置"></a>工具和环境设置</h3><ol><li><strong>浏览器</strong></li></ol><ul><li><strong>Chrome浏览器</strong>：开发 Chrome 插件的主要平台，确保要使用最新版本。如果你日常使用Edge浏览器，也可以选择Edge浏览器，两个浏览器的拓展基本可以通用。</li></ul><ol start="2"><li><strong>打开浏览器的开发者模式</strong></li></ol><ul><li><p><strong>Chrome浏览器开发者模式</strong>：在浏览器地址栏输入 <code>chrome://extensions/</code>，点击进入拓展管理页面</p><p><img src="https://raw.githubusercontent.com/Alanrk/blogimg/main/202408201055853.png"></p></li></ul><p>Chrome 浏览器在打开的拓展管理页面，打开页面右上角的【开发者模式】</p><p><img src="https://raw.githubusercontent.com/Alanrk/blogimg/main/202408201057796.png"><br>3. <strong>下载文本编辑器，用于编辑代码，任意一个就可以</strong></p><ul><li><p><strong>VS Code</strong>：广受欢迎的免费文本编辑器，支持 JavaScript、HTML、CSS 等语言，有丰富的插件可以提升开发体验。<strong>点击这里下载<a href="https://code.visualstudio.com/Download">Download Visual Studio Code - Mac, Linux, Windows</a></strong></p></li><li><p><strong>Sublime Text</strong>：轻量级的编辑器，支持快速编辑和预览代码。<strong>点击这里下载<a href="https://www.sublimetext.com/download">Download - Sublime Text</a></strong></p></li></ul><p>以上工具准备好以后，就可以开始让AI帮忙写代码，我这里是使用的是Devv.ai里面的GPT-40 mini，下面就是我和 ChatGPT 沟通的过程，我会把关键部分的全部贴出来。</p><h2 id="开始让ChatGPT写代码"><a href="#开始让ChatGPT写代码" class="headerlink" title="开始让ChatGPT写代码"></a>开始让ChatGPT写代码</h2><h3 id="我的提问1："><a href="#我的提问1：" class="headerlink" title="我的提问1："></a>我的提问1：</h3><p>【我想开发一个 chrome网页插件，这个插件可以在在 boss直聘的网站上公司详细介绍部分的旁边显示搜索按钮，点击搜索按钮可以直接跳转到搜索【天眼查】中该公司的信息，请帮忙提供完整的项目代码。】</p><h3 id="ChatGPT-回答1："><a href="#ChatGPT-回答1：" class="headerlink" title="ChatGPT 回答1："></a>ChatGPT 回答1：</h3><p>要创建一个 Chrome 扩展程序，在BOSS直聘网站上的公司详细信息旁边添加一个搜索按钮，该按钮会重定向到天眼查以获取公司信息，您可以按照以下步骤操作。以下是项目代码的完整示例。</p><h3 id="1-创建项目结构"><a href="#1-创建项目结构" class="headerlink" title="1. 创建项目结构"></a>1. 创建项目结构</h3><p>为您的 Chrome 扩展程序创建一个文件夹，例如<code>boss-zhipin-search</code> 。在此文件夹中，创建以下文件：</p><ul><li><code>manifest.json</code></li><li><code>content.js</code></li><li><code>styles.css</code></li></ul><h3 id="2-manifest-json"><a href="#2-manifest-json" class="headerlink" title="2. manifest.json"></a>2. <code>manifest.json</code></h3><p>该文件包含有关您的扩展的元数据。</p><pre><code class="json">&#123;  &quot;manifest_version&quot;: 3,  &quot;name&quot;: &quot;Boss Zhipin Search Button&quot;,  &quot;version&quot;: &quot;1.0&quot;,  &quot;description&quot;: &quot;Adds a search button next to company details on Boss Zhipin.&quot;,  &quot;permissions&quot;: [&quot;activeTab&quot;],  &quot;content_scripts&quot;: [    &#123;      &quot;matches&quot;: [&quot;https://www.zhipin.com/*&quot;],      &quot;js&quot;: [&quot;content.js&quot;],      &quot;css&quot;: [&quot;styles.css&quot;]    &#125;  ],  &quot;action&quot;: &#123;    &quot;default_popup&quot;: &quot;popup.html&quot;,    &quot;default_icon&quot;: &#123;      &quot;16&quot;: &quot;images/icon16.png&quot;,      &quot;48&quot;: &quot;images/icon48.png&quot;,      &quot;128&quot;: &quot;images/icon128.png&quot;    &#125;  &#125;&#125;</code></pre><h3 id="3-content-js"><a href="#3-content-js" class="headerlink" title="3. content.js"></a>3. <code>content.js</code></h3><p>该脚本将在Boss直聘网站上运行并添加搜索按钮。</p><pre><code class="javascript">// Function to create and insert the search buttonfunction addSearchButton() &#123;    // Find the company details section    const companyDetail = document.querySelector(&#39;.company-detail&#39;); // Adjust the selector based on the actual class used on the site    if (companyDetail) &#123;        // Create the button        const searchButton = document.createElement(&#39;button&#39;);        searchButton.innerText = &#39;Search on Tianyancha&#39;;        searchButton.className = &#39;search-button&#39;;        searchButton.onclick = function() &#123;            const companyName = document.querySelector(&#39;.company-name&#39;).innerText; // Adjust the selector based on the actual class used on the site            const searchUrl = `https://www.tianyancha.com/search?key=$&#123;encodeURIComponent(companyName)&#125;`;            window.open(searchUrl, &#39;_blank&#39;);        &#125;;        // Insert the button next to the company detail section        companyDetail.appendChild(searchButton);    &#125;&#125;// Run the function after the page loadswindow.onload = addSearchButton;</code></pre><h3 id="4-styles-css"><a href="#4-styles-css" class="headerlink" title="4. styles.css"></a>4. <code>styles.css</code></h3><p>该文件包含搜索按钮的样式。</p><pre><code class="css">.search-button &#123;    margin-left: 10px;    padding: 5px 10px;    background-color: #007bff;    color: white;    border: none;    border-radius: 4px;    cursor: pointer;    font-size: 14px;&#125;.search-button:hover &#123;    background-color: #0056b3;&#125;</code></pre><h3 id="5-在-Chrome-中加载扩展程序"><a href="#5-在-Chrome-中加载扩展程序" class="headerlink" title="5.在 Chrome 中加载扩展程序"></a>5.在 Chrome 中加载扩展程序</h3><ol><li>打开 Chrome 并转到<code>chrome://extensions/</code> 。</li><li>启用右上角的“开发者模式”。</li><li>单击“加载解压的文件”并选择您在其中创建扩展的文件夹。</li></ol><h3 id="6-测试扩展"><a href="#6-测试扩展" class="headerlink" title="6. 测试扩展"></a>6. 测试扩展</h3><p>导航至老板直聘网站，检查公司详细信息旁边是否出现搜索按钮。单击它应该会打开一个新选项卡，其中包含该公司的天眼查搜索结果。</p><h3 id="提示"><a href="#提示" class="headerlink" title="提示"></a>提示</h3><p>请务必根据Boss直聘网站的实际结构调整<code>content.js</code>文件中的选择器，因为它们可能会随着时间的推移而变化</p><hr><h2 id="我的提问2"><a href="#我的提问2" class="headerlink" title="我的提问2"></a>我的提问2</h2><p>因为我不知道完整的项目文件夹是什么样的，所以我问 ChatGPT【我的boss-zhipin-search项目文件夹是什么样的】</p><h2 id="ChatGPT-回答2"><a href="#ChatGPT-回答2" class="headerlink" title="ChatGPT 回答2"></a>ChatGPT 回答2</h2><p>对于您的<code>boss-zhipin-search</code> Chrome 扩展项目，应组织文件夹结构以清楚地区分扩展程序的不同组件。以下是专门针对您的项目建议的文件夹结构：</p><p>boss-zhipin-search&#x2F;<br>│<br>├── manifest.json           # Metadata for the Chrome extension<br>├── content.js                 # Script to add the search button on the webpage<br>├── styles.css                 # CSS styles for the search button<br>├── popup.html              # Optional: Popup HTML for the extension (if needed)<br>├── images&#x2F;                    # Optional: Folder for icons or images used in the extension<br>│   ├── icon16.png           # 16x16 icon<br>│   ├── icon48.png          # 48x48 icon<br>│   └── icon128.png         # 128x128 icon<br>│<br>└── README.md              # Documentation for the project</p><h3 id="解释每个文件夹的内容"><a href="#解释每个文件夹的内容" class="headerlink" title="解释每个文件夹的内容"></a>解释每个文件夹的内容</h3><ul><li><p><strong>manifest.json</strong> ：此文件包含 Chrome 扩展程序的元数据，包括权限、版本和要加载的脚本。</p></li><li><p><strong>content.js</strong> ：这是将在老板直聘网站上运行的 JavaScript 文件。它包含在公司详细信息旁边添加搜索按钮的逻辑。</p></li><li><p><strong>styles.css</strong> ：此文件包含搜索按钮的 CSS 样式，确保其在网页上看起来不错。</p></li><li><p><strong>popup.html</strong> ：（可选）如果您想在单击图标时为扩展程序创建弹出窗口，则可以包含此文件。</p></li><li><p><strong>images&#x2F;</strong> ：（可选）用于存储您可能在扩展程序中使用的任何图标或图像的文件夹。您可以为扩展程序图标添加不同的大小。</p></li><li><p><strong>README.md</strong> ：一个 markdown 文件，提供有关您的项目的文档，包括设置说明、用法和任何其他相关信息。</p></li></ul><h3 id="提醒"><a href="#提醒" class="headerlink" title="提醒"></a>提醒</h3><p>请务必根据您的具体要求以及您想要在 Chrome 扩展程序中实现的功能来调整<code>manifest.json</code> 、 <code>content.js</code>和<code>styles.css</code>文件的内容。</p><hr><p><strong>这里我看到</strong>【popup.html ：（可选）如果您想在单击图标时为扩展程序创建弹出窗口，则可以包含此文件。】，我的插件不需要在地址栏的拓展图标上创建弹出窗口。所以我问 ChatGPT，我的项目是否不需要popup.html 。</p><hr><h2 id="我的提问3"><a href="#我的提问3" class="headerlink" title="我的提问3"></a>我的提问3</h2><p>“default_popup”: “popup.html”。根据我的需求，是不是不需要</p><h2 id="ChatGPT-回答3"><a href="#ChatGPT-回答3" class="headerlink" title="ChatGPT 回答3"></a>ChatGPT 回答3</h2><p>是的，根据您的要求，您的<code>manifest.json</code>文件中不需要<code>&quot;default_popup&quot;: &quot;popup.html&quot;</code>条目。由于您的扩展程序旨在直接在老板直聘网站上添加搜索按钮，而不需要弹出界面，因此您可以删除该行。</p><p>如果没有弹出窗口， <code>manifest.json</code>的内容如下：</p><pre><code class="json">&#123;  &quot;manifest_version&quot;: 3,  &quot;name&quot;: &quot;Boss Zhipin Search Button&quot;,  &quot;version&quot;: &quot;1.0&quot;,  &quot;description&quot;: &quot;Adds a search button next to company details on Boss Zhipin.&quot;,  &quot;permissions&quot;: [&quot;activeTab&quot;],  &quot;content_scripts&quot;: [    &#123;      &quot;matches&quot;: [&quot;https://www.zhipin.com/*&quot;],      &quot;js&quot;: [&quot;content.js&quot;],      &quot;css&quot;: [&quot;styles.css&quot;]    &#125;  ]&#125;</code></pre><p>通过直接在网页上添加搜索按钮，此配置足以让您的扩展按预期运行。</p><hr><h2 id="创建项目文件"><a href="#创建项目文件" class="headerlink" title="创建项目文件"></a>创建项目文件</h2><ol><li><p>首先新建一个名为<code>boss-zhipin-search</code>的文件夹来存放项目文件。</p></li><li><p>打开 <strong>Sublime Text</strong>（这里我是使用Sublime，你也可以其它的文本编辑器），把ChatGPT 给的<code>manifest.json</code>、<code>content.js</code>、<code>styles.css</code>里的代码复制到Sublime中，并分别以<code>manifest.json</code>、<code>content.js</code>、<code>styles.css</code>来命名保存到项目的文件夹中。</p></li><li><p>保存上面的文件，在浏览器测试一下，没有报错。打开 boss直聘的任意一个职位详情，但是也没有看到我的搜索按钮。是因为代码 <code>content.js</code>中没有找到显示搜索按钮的元素的位置 。我们需要打开浏览器的【检查】模式，代码中找到显示公司名字的元素，告诉 ChatGPT 在这个元素旁边显示搜索按钮。</p></li></ol><p><img src="https://raw.githubusercontent.com/Alanrk/blogimg/main/companyname.gif"></p><hr><h2 id="我的提问4"><a href="#我的提问4" class="headerlink" title="我的提问4"></a>我的提问4</h2><p> 我想在company-name旁边显示搜索按钮，如何修改代码</p><h2 id="ChatGPT回答4"><a href="#ChatGPT回答4" class="headerlink" title="ChatGPT回答4"></a>ChatGPT回答4</h2><p>要在提供的 HTML 结构中的公司名称旁边显示搜索按钮，您需要修改<code>content.js</code>文件以专门针对具有类<code>company-name</code>的<code>li</code>元素，并在其旁边附加按钮。以下是完成此操作的更新后的<code>content.js</code>代码：</p><h3 id="更新了content-js"><a href="#更新了content-js" class="headerlink" title="更新了content.js"></a>更新了<code>content.js</code></h3><pre><code class="javascript">// Function to create and insert the search button next to the company namefunction addSearchButton() &#123;    // Find the company name element    const companyNameElement = document.querySelector(&#39;.company-name&#39;);    if (companyNameElement) &#123;        // Create the button        const searchButton = document.createElement(&#39;button&#39;);        searchButton.innerText = &#39;Search on Tianyancha&#39;;        searchButton.className = &#39;search-button&#39;;        searchButton.onclick = function() &#123;            const companyName = companyNameElement.innerText.replace(&#39;公司名称&#39;, &#39;&#39;).trim(); // Extract the company name            const searchUrl = `https://www.tianyancha.com/search?key=$&#123;encodeURIComponent(companyName)&#125;`;            window.open(searchUrl, &#39;_blank&#39;);        &#125;;        // Insert the button next to the company name        companyNameElement.appendChild(searchButton);    &#125;&#125;// Run the function after the page loadswindow.onload = addSearchButton;</code></pre><h3 id="代码解释"><a href="#代码解释" class="headerlink" title="代码解释"></a>代码解释</h3><ol><li><p><strong>定位公司名称</strong>：代码使用<code>document.querySelector(&#39;.company-name&#39;)</code>选择包含公司名称的<code>li</code>元素。</p></li><li><p><strong>创建按钮</strong>：创建一个带有文本“天眼查搜索”的按钮。</p></li><li><p><strong>按钮单击事件</strong>：单击按钮时，它会通过删除“公司名称”标签和任何前导&#x2F;尾随空格来提取公司名称。然后它构建天眼查的搜索 URL。</p></li><li><p><strong>附加按钮</strong>：按钮附加到<code>company-name</code>元素，将其直接放置在列表中公司名称的旁边。</p></li></ol><h3 id="CSS-styles-css"><a href="#CSS-styles-css" class="headerlink" title="CSS (styles.css)"></a>CSS (styles.css)</h3><p>确保您的<code>styles.css</code>文件中有以下 CSS 来设置按钮的样式：</p><pre><code class="css">.search-button &#123;    margin-left: 10px; /* Space between the company name and the button */    padding: 5px 10px;    background-color: #007bff;    color: white;    border: none;    border-radius: 4px;    cursor: pointer;    font-size: 14px;&#125;.search-button:hover &#123;    background-color: #0056b3;&#125;</code></pre><h3 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h3><p>经过这些更改，当您加载boss直聘网站时，您应该会在公司名称旁边看到“在天眼查上搜索”按钮。单击该按钮将打开一个新选项卡，其中包含该公司在天眼查上的搜索结果。</p><hr><h2 id="更新项目代码"><a href="#更新项目代码" class="headerlink" title="更新项目代码"></a>更新项目代码</h2><p>按照 ChatGPT 给的代码，更新<code>styles.css</code>和<code>content.js</code> 并保存后，在拓展管理页面，重新加载拓展，然后再刷新 boss直聘职位详情的页面。可以看到，搜索按钮并没有显示在我们预想的位置上，原因是这个页面上有多个<code>company-name</code>元素，所以程序在找到第一个<code>company-name</code>元素后面就显示在第一个<code>company-name</code>的后面了。我们需要对<code>company-name</code>进行限制，找到它的父元素，告诉程序是在哪个父元素下的<code>company-name</code>才显示。还是和之前一样，在页面右键选择检查模式，查看<code>company-name</code>的父元素是哪一个，经过查看是ul class&#x3D;”level-list”下面的li class&#x3D;”company-name”。所以提问给ChatGPT，让它更新代码。<br><img src="https://raw.githubusercontent.com/Alanrk/blogimg/main/202408211753485.png"></p><p><img src="https://raw.githubusercontent.com/Alanrk/blogimg/main/202408211759183.png"></p><hr><h2 id="我的提问5"><a href="#我的提问5" class="headerlink" title="我的提问5"></a>我的提问5</h2><p>.company-name在页面上有多个，我只想让它在ul class&#x3D;”level-list”下的li class&#x3D;”company-name”显示</p><h2 id="ChatGPT-回答-5"><a href="#ChatGPT-回答-5" class="headerlink" title="ChatGPT 回答 5"></a>ChatGPT 回答 5</h2><p>为了确保搜索按钮仅添加到类<code>company-name</code>的<code>li</code>元素旁边，该元素专门位于类<code>level-list</code>的<code>ul</code>中，您可以修改<code>content.js</code>文件中的选择器。您可以这样做：</p><h3 id="更新content-js"><a href="#更新content-js" class="headerlink" title="更新content.js"></a>更新<code>content.js</code></h3><pre><code class="javascript">// Function to create and insert the search button next to the company name in the specified listfunction addSearchButton() &#123;    // Find the specific company name element within the level-list    const companyNameElement = document.querySelector(&#39;.level-list .company-name&#39;);    if (companyNameElement) &#123;        // Create the button        const searchButton = document.createElement(&#39;button&#39;);        searchButton.innerText = &#39;Search on Tianyancha&#39;;        searchButton.className = &#39;search-button&#39;;        searchButton.onclick = function() &#123;            const companyName = companyNameElement.innerText.replace(&#39;公司名称&#39;, &#39;&#39;).trim(); // Extract the company name            const searchUrl = `https://www.tianyancha.com/search?key=$&#123;encodeURIComponent(companyName)&#125;`;            window.open(searchUrl, &#39;_blank&#39;);        &#125;;        // Insert the button next to the company name        companyNameElement.appendChild(searchButton);    &#125;&#125;// Run the function after the page loadswindow.onload = addSearchButton;</code></pre><h3 id="变更说明"><a href="#变更说明" class="headerlink" title="变更说明"></a>变更说明</h3><ol><li><p><strong>选择器更新</strong>： <code>document.querySelector(&#39;.level-list .company-name&#39;)</code>中的选择器已更新，以专门针对具有类<code>company-name</code>的<code>li</code>元素，该元素是具有类<code>level-list</code>的<code>ul</code>的后代。这可确保仅选择所需的公司名称元素。</p></li><li><p><strong>按钮创建和插入</strong>：代码的其余部分保持不变，其中创建按钮并将其附加到所选公司名称旁边。</p></li></ol><h3 id="结果-1"><a href="#结果-1" class="headerlink" title="结果"></a>结果</h3><p>通过此修改，搜索按钮将仅出现在指定<code>level-list</code>内的<code>company-name</code>旁边，确保它不会影响页面上其他位置可能存在的<code>company-name</code>的其他实例。</p><hr><h2 id="更新项目代码-1"><a href="#更新项目代码-1" class="headerlink" title="更新项目代码"></a>更新项目代码</h2><p>更新<code>content.js</code>的代码并保存，和之前一样，在插件管理页面重新载入插件，刷新boss直聘的页面查看效果。</p><p>可以看到按钮已经显示在公司名字的后面了，点击也可以跳转到天眼查的搜索结果页面。但是跳转到天眼查的公司名字后面带上了’Search on Tianyancha’，这个文案是我们不想要的。于是继续提问 ChatGPT。</p><p><img src="https://raw.githubusercontent.com/Alanrk/blogimg/main/202408211812020.png"><img src="https://raw.githubusercontent.com/Alanrk/blogimg/main/202408211815194.png"></p><hr><h2 id="我的提问-6"><a href="#我的提问-6" class="headerlink" title="我的提问 6"></a>我的提问 6</h2><p>跳转到天眼查后面的搜索词的Search on Tianyancha，我想去掉。</p><h2 id="ChatGPT-回答-6"><a href="#ChatGPT-回答-6" class="headerlink" title="ChatGPT 回答 6"></a>ChatGPT 回答 6</h2><p>如果您想修改功能，使“天眼查搜索”按钮重定向到天眼查时 URL 中不包含公司名称，您只需调整<code>content.js</code>文件中的<code>onclick</code>事件处理程序即可。操作方法如下：</p><h3 id="更新content-js-1"><a href="#更新content-js-1" class="headerlink" title="更新content.js"></a>更新<code>content.js</code></h3><pre><code class="javascript">// Function to create and insert the search button next to the company name in the specified listfunction addSearchButton() &#123;    // Find the specific company name element within the level-list    const companyNameElement = document.querySelector(&#39;.level-list .company-name&#39;);    if (companyNameElement) &#123;        // Create the button        const searchButton = document.createElement(&#39;button&#39;);        searchButton.innerText = &#39;Search on Tianyancha&#39;;        searchButton.className = &#39;search-button&#39;;        searchButton.onclick = function() &#123;            // Redirect to Tianyancha without any search term            const searchUrl = `https://www.tianyancha.com/`; // Just the base URL            window.open(searchUrl, &#39;_blank&#39;);        &#125;;        // Insert the button next to the company name        companyNameElement.appendChild(searchButton);    &#125;&#125;// Run the function after the page loadswindow.onload = addSearchButton;</code></pre><h3 id="变更说明-1"><a href="#变更说明-1" class="headerlink" title="变更说明"></a>变更说明</h3><ol><li><strong>搜索 URL 修改</strong>：构建搜索 URL 的行已更改为仅指向天眼查的基本 URL： <code>const searchUrl =</code> <a href="https://www.tianyancha.com/%60;%60">https://www.tianyancha.com/<code>;</code></a> 。这意味着，当单击该按钮时，将打开天眼查主页，其中不包含任何搜索词。</li></ol><h3 id="结果-2"><a href="#结果-2" class="headerlink" title="结果"></a>结果</h3><p>通过此更改，单击“在天眼查上搜索”按钮会将用户重定向到天眼查主页，而无需附加任何搜索词。</p><hr><p>可以看到，上面 ChatGPT 理解错我的意思了。于是我再次重新描述我的问题。</p><hr><h2 id="我的提问7"><a href="#我的提问7" class="headerlink" title="我的提问7"></a>我的提问7</h2><p>你理解错我的意思了，我是想让搜索词后面的Search on Tianyancha去掉。只显示天眼查</p><hr><p><strong>这里我提问错了，就不展示ChatGPT 的回答了。我想到一个办法，让 ChatGPT 来解释获取公司名字的代码的逻辑是什么，这样看下怎么来修改逻辑</strong></p><h2 id="我的提问8"><a href="#我的提问8" class="headerlink" title="我的提问8"></a>我的提问8</h2><p>const companyName &#x3D; companyNameElement.innerText.replace(‘公司名称’, ‘’).trim(); 这段代码是什么意思</p><h2 id="ChatGPT-回答-8"><a href="#ChatGPT-回答-8" class="headerlink" title="ChatGPT 回答 8"></a>ChatGPT 回答 8</h2><p> 代码行：</p><pre><code class="javascript">const companyName = companyNameElement.innerText.replace(&#39;公司名称&#39;, &#39;&#39;).trim();</code></pre><h3 id="解释"><a href="#解释" class="headerlink" title="解释:"></a>解释:</h3><ol><li><p><strong><code>companyNameElement.innerText</code></strong> ：这将检索<code>companyNameElement</code>的文本内容，该元素是一个HTML 元素（在本例中是一个具有<code>company-name</code>类的<code>li</code>元素）。文字可能类似于“公司名称鞍上灵感（上海）品牌策划有限公司”。</p></li><li><p><strong><code>.replace(&#39;公司名称&#39;, &#39;&#39;)</code></strong> ：此方法调用将子字符串<code>&#39;公司名称&#39;</code> （中文意思是“公司名称”）替换为空字符串<code>&#39;&#39;</code> 。这有效地从字符串中删除了文本的特定部分。所以，如果原来的文字是“公司名称鞍上灵感（上海）品牌策划有限公司”，经过这次操作，就变成了“鞍上灵感（上海）品牌策划有限公司”。</p></li><li><p><strong><code>.trim()</code></strong> ：此方法从结果字符串中删除任何前导或尾随空格。这对于确保替换后字符串的开头或结尾没有多余的空格很有用。</p></li></ol><h3 id="最终结果"><a href="#最终结果" class="headerlink" title="最终结果:"></a>最终结果:</h3><p><code>companyName</code>的最终值将是清理后的公司名称，没有“公司名称”前缀，也没有任何额外的空格。例如，如果原文为“公司名称鞍上灵感（上海）品牌策划有限公司”，则<code>companyName</code>的最终值为“鞍上灵感（上海）品牌策划有限公司”。</p><hr><h2 id="我的提问9"><a href="#我的提问9" class="headerlink" title="我的提问9"></a>我的提问9</h2><p>跳转到天眼查后搜索词默认带有Search on Tianyancha，例如鞍上灵感（上海）品牌策划有限公司Search on Tianyancha。我想去掉跳转后的搜索词Search on Tianyancha。</p><h2 id="ChatGPT回答9"><a href="#ChatGPT回答9" class="headerlink" title="ChatGPT回答9"></a>ChatGPT回答9</h2><p>如果您想确保重定向到天眼查时，公司名称中没有附加“天眼查”等其他文字，则需要确保您为重定向构建的 URL 仅包含公司名称本身。</p><p>下面介绍了如何在 JavaScript 代码中实现此目的：</p><h3 id="更新content-js-2"><a href="#更新content-js-2" class="headerlink" title="更新content.js"></a>更新<code>content.js</code></h3><pre><code class="javascript">// Function to create and insert the search button next to the company name in the specified listfunction addSearchButton() &#123;    // Find the specific company name element within the level-list    const companyNameElement = document.querySelector(&#39;.level-list .company-name&#39;);    if (companyNameElement) &#123;        // Create the button        const searchButton = document.createElement(&#39;button&#39;);        searchButton.innerText = &#39;天眼查&#39;; // Change button text to &quot;天眼查&quot;        searchButton.className = &#39;search-button&#39;;        searchButton.onclick = function() &#123;            // Extract the company name and remove any unwanted text            const companyName = companyNameElement.innerText.replace(&#39;公司名称&#39;, &#39;&#39;).trim(); // Clean the company name            const searchUrl = `https://www.tianyancha.com/search?key=$&#123;encodeURIComponent(companyName)&#125;`; // Construct search URL            window.open(searchUrl, &#39;_blank&#39;); // Open the search URL in a new tab        &#125;;        // Insert the button next to the company name        companyNameElement.appendChild(searchButton);    &#125;&#125;// Run the function after the page loadswindow.onload = addSearchButton;</code></pre><h3 id="代码解释-1"><a href="#代码解释-1" class="headerlink" title="代码解释:"></a>代码解释:</h3><ol><li><p><strong>按钮创建</strong>：创建一个标记为“天眼查”的按钮并将其附加到公司名称元素上。</p></li><li><p><strong>公司名称提取</strong>：行<code>const companyName = companyNameElement.innerText.replace(&#39;公司名称&#39;, &#39;&#39;).trim();</code>通过删除“公司名称”前缀来清理公司名称。</p></li><li><p><strong>搜索 URL 构建</strong>：使用清理后的公司名称构建搜索 URL。 <code>encodeURIComponent(companyName)</code>函数确保公司名称经过正确编码以供在 URL 中使用。</p></li><li><p><strong>打开URL</strong> ：当点击该按钮时，会在新选项卡中打开构建的搜索URL，该URL将仅包含公司名称作为搜索词，而不会包含任何其他文本，例如“在天眼查上搜索”。</p></li></ol><h3 id="结果："><a href="#结果：" class="headerlink" title="结果："></a>结果：</h3><p>通过此设置，当您单击“天眼查”按钮时，它会将您重定向到天眼查，仅以公司名称作为搜索词，而不会附加任何不需要的文本。</p><h2 id="代码测试"><a href="#代码测试" class="headerlink" title="代码测试"></a>代码测试</h2>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;背景介绍&quot;&gt;&lt;a href=&quot;#背景介绍&quot; class=&quot;headerlink&quot; title=&quot;背景介绍&quot;&gt;&lt;/a&gt;背景介绍&lt;/h2&gt;&lt;p&gt;在即刻上发了我使用 ChatGPT 开发的浏览器插件“Bossfinder-一键快速搜公司”，有网友在求教程，趁着周末有空，</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>AiNewTab-把喜欢的书签设为首页</title>
    <link href="https://www.orionwang.com/posts/AiNewTab-Set-Favorite-Bookmarks-as-Homepage/"/>
    <id>https://www.orionwang.com/posts/AiNewTab-Set-Favorite-Bookmarks-as-Homepage/</id>
    <published>2024-08-15T15:58:29.000Z</published>
    <updated>2024-08-16T08:34:31.984Z</updated>
    
    <content type="html"><![CDATA[<p>不满意现有的浏览器标签页，花费 358 元，零代码基础，我用Ai 做了一个小众的网站导航插件。</p><p><strong>AiNewTab-把喜欢的书签设为首页</strong></p><p><strong>项目主页</strong>：<a href="https://www.ainewtab.app/">AiNewTab-Set Favorite Bookmarks as Homepage</a></p><p><strong>Chrome Web Store地址</strong> ：<a href="https://chromewebstore.google.com/detail/ainewtab-set-favorite-boo/jpejneelbjckppjapemgfeheifljmaib">chromewebstore.google.com</a></p><p><strong>手动安装教程</strong>：<a href="https://cooing-loganberry-b74.notion.site/AiNewTab-6499df3aa1c54620805e378d3b0f809c">cooing-loganberry-b74.notion.site</a></p><p><strong>使用教程</strong>：<a href="https://cooing-loganberry-b74.notion.site/AiNewTab-7a083a74f84e4bb48345e389c1e53717">cooing-loganberry-b74.notion.site</a></p><p><img src="https://raw.githubusercontent.com/Alanrk/blogimg/main/202408161610688.png"></p><h2 id="核心功能如下"><a href="#核心功能如下" class="headerlink" title="核心功能如下"></a>核心功能如下</h2><h3 id="一键设为主页"><a href="#一键设为主页" class="headerlink" title="一键设为主页"></a>一键设为主页</h3><p>选择书签文件夹，右键轻松将喜爱的书签设为主页，随心拖动排列，让浏览更符合你的习惯。 侧边栏树状视图让你直观管理书签文件夹，快速找到所需内容。  </p><h3 id="AI智能搜索"><a href="#AI智能搜索" class="headerlink" title="AI智能搜索"></a>AI智能搜索</h3><p>在新标签页直接使用 AI 搜索，快速访问豆包、Kimi、秘塔、felo、ChatGPT 等，还支持 Google、Bing 等经典搜索引擎，随心拖动排列，更加符合你的使用习惯。  </p><h3 id="一键对比搜索"><a href="#一键对比搜索" class="headerlink" title="一键对比搜索"></a>一键对比搜索</h3><p>一键在多个搜索引擎中查找同一内容，对比不同结果，助你找到最佳答案。  </p><h3 id="选中文字搜索"><a href="#选中文字搜索" class="headerlink" title="选中文字搜索"></a>选中文字搜索</h3><p>在任意网页使用鼠标选中文字后，通过点击侧边栏或快捷键（Alt + 1-6 打开对应搜索，Cmd&#x2F;Ctrl + Enter 打开全部搜索）高效启动搜索。</p><h2 id="为什么要开发这个插件？"><a href="#为什么要开发这个插件？" class="headerlink" title="为什么要开发这个插件？"></a>为什么要开发这个插件？</h2><p>其实很简单，我一直以来习惯用浏览器的书签作为自己的网站导航工具，但总觉得系统自带的书签栏不够好用，主要有几个问题：  </p><ul><li><p><strong>书签显示不全</strong>：书签栏只能显示有限的书签，超出部分就会被折叠，查找起来很麻烦。而且，我也不喜欢让浏览器地址栏下面再显示一条书签栏，显得很臃肿。  </p></li><li><p><strong>文件夹不便</strong>：书签栏的文件夹默认是折叠的，每次都要手动点开，层层展开，感觉非常繁琐。  </p></li><li><p><strong>层级太深</strong>：我收藏了很多书签，但有些已经忘记放在哪个文件夹里了，整理和查找起来都很费劲。</p></li></ul><p>我试用了很多插件，但发现大多数都不支持直接导入和自动同步书签，而且UI设计和交互体验也不符合我的要求。于是我想，既然找不到一个完全合适的工具，为什么不自己做一个呢？  </p><p>虽然我没有任何代码经验，但在ChatGPT和Claude的帮助下，我成功开发了这个插件，给自己打造了一个专属的导航站。  </p><p>在开发这个插件时，我给自己定了几个原则：  </p><ul><li><p><strong>本地优先</strong>：插件必须高效，页面加载要快，所以尽量用本地资源，比如网站图标和信息都通过Chrome API获取，能不联网就不联网。  </p></li><li><p><strong>稳定优先</strong>：书签同步直接用Chrome或者Edge官方的功能，不折腾第三方服务。  </p></li><li><p><strong>简单优先</strong>：插件装好后就能直接用，默认设置必须够友好，用户不需要导入、添加什么乱七八糟的东西，简洁明了。  </p></li><li><p><strong>场景优先</strong>：根据不同使用场景做优化，比如专门为日常搜索做了一个模块，提升使用体验。  </p></li><li><p><strong>重点优先</strong>：常用书签优先展示，减少在一堆书签里翻找的时间，让最常用的书签触手可及。</p></li></ul><p>虽然插件现在还没完全达到我理想中的效果，但接下来我会继续优化，尤其是搜索功能。比如，计划增加书签搜索、历史记录搜索、更多的AI搜索（类似哥飞和Orange.ai的产品），还会加入一些小组件，提升整体的使用体验。  </p><p>如果你对这个插件感兴趣，欢迎关注或者留言。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;不满意现有的浏览器标签页，花费 358 元，零代码基础，我用Ai 做了一个小众的网站导航插件。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;AiNewTab-把喜欢的书签设为首页&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;项目主页&lt;/strong&gt;：&lt;a href=&quot;https:/</summary>
      
    
    
    
    
    <category term="浏览器拓展" scheme="https://www.orionwang.com/tags/%E6%B5%8F%E8%A7%88%E5%99%A8%E6%8B%93%E5%B1%95/"/>
    
    <category term="AiNewTab" scheme="https://www.orionwang.com/tags/AiNewTab/"/>
    
  </entry>
  
  <entry>
    <title>BossFinder-一键快速搜公司</title>
    <link href="https://www.orionwang.com/posts/BossFinder-%E4%B8%80%E9%94%AE%E5%BF%AB%E9%80%9F%E6%90%9C%E5%85%AC%E5%8F%B8/"/>
    <id>https://www.orionwang.com/posts/BossFinder-%E4%B8%80%E9%94%AE%E5%BF%AB%E9%80%9F%E6%90%9C%E5%85%AC%E5%8F%B8/</id>
    <published>2024-08-01T01:00:55.000Z</published>
    <updated>2024-08-15T15:57:18.446Z</updated>
    
    <content type="html"><![CDATA[<p>【BossFinder-一键快速搜公司】是一款帮助求职用户在Boss直聘网站上快速查看公司背景信息的浏览器插件，帮助用户在天眼查和社交媒体上快速搜索公司信息，节省查看时间。</p><p><img src="https://raw.githubusercontent.com/Alanrk/blogimg/main/Screenity%20video%20-%20Aug%201%2C%202024.gif"></p><h3 id="如何安装"><a href="#如何安装" class="headerlink" title="如何安装"></a>如何安装</h3><h4 id="在线安装"><a href="#在线安装" class="headerlink" title="在线安装"></a>在线安装</h4><p>Chrome  浏览器（谷歌浏览器）、Edge浏览器可以使用Chrome Web Store在线安装（需要可以访问 Google）</p><p><a href="https://chromewebstore.google.com/detail/bossfinder-%E4%B8%80%E9%94%AE%E5%BF%AB%E9%80%9F%E6%90%9C%E5%85%AC%E5%8F%B8/jjjhinkblmnnlohaiebbldhknhagkmbg?hl=en&authuser=0">BossFinder-一键快速搜公司 - Chrome Web Store (google.com)</a></p><h4 id="手动下载安装"><a href="#手动下载安装" class="headerlink" title="手动下载安装"></a>手动下载安装</h4><h5 id="下载拓展安装包"><a href="#下载拓展安装包" class="headerlink" title="下载拓展安装包"></a>下载拓展安装包</h5><p><a href="https://cooing-loganberry-b74.notion.site/BossFinder-7fbfa43e7ffa4bd2be633f2597fb11c4">BossFinder-一键快速搜公司 (notion.site)</a></p><h5 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h5><p>在浏览器地址栏输入 <code>chrome://extensions/</code>，点击进入插件管理页面</p><p><img src="https://raw.githubusercontent.com/Alanrk/blogimg/main/20240801091916.png"></p><p>谷歌浏览器在打开的拓展管理页面，打开页面右上角的【开发者模式】，把下载下来的拓展文件拖进这个页面即可安装。</p><p><img src="https://raw.githubusercontent.com/Alanrk/blogimg/main/20240801092254.png"></p><p>Edge浏览器在打开的拓展管理页面，打开页面的左下角【开发者模式】，把下载下来的拓展文件拖进这个页面即可安装。</p><p><img src="https://raw.githubusercontent.com/Alanrk/blogimg/main/20240801093436.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;【BossFinder-一键快速搜公司】是一款帮助求职用户在Boss直聘网站上快速查看公司背景信息的浏览器插件，帮助用户在天眼查和社交媒体上快速搜索公司信息，节省查看时间。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com</summary>
      
    
    
    
    
    <category term="浏览器拓展" scheme="https://www.orionwang.com/tags/%E6%B5%8F%E8%A7%88%E5%99%A8%E6%8B%93%E5%B1%95/"/>
    
  </entry>
  
  <entry>
    <title>Cloudflare如何设置主域名跳转到www域名</title>
    <link href="https://www.orionwang.com/posts/Cloudflare%E5%A6%82%E4%BD%95%E8%AE%BE%E7%BD%AE%E4%B8%BB%E5%9F%9F%E5%90%8D%E8%B7%B3%E8%BD%AC%E5%88%B0www%E5%9F%9F%E5%90%8D/"/>
    <id>https://www.orionwang.com/posts/Cloudflare%E5%A6%82%E4%BD%95%E8%AE%BE%E7%BD%AE%E4%B8%BB%E5%9F%9F%E5%90%8D%E8%B7%B3%E8%BD%AC%E5%88%B0www%E5%9F%9F%E5%90%8D/</id>
    <published>2024-07-13T02:26:19.000Z</published>
    <updated>2024-08-15T15:53:35.381Z</updated>
    
    <content type="html"><![CDATA[<p>我的博客的域名是 <a href="http://www.orionwang.com/">www.orionwang.com</a> ，我想让用户在地址栏输入 orionwang.com 时也能自动跳转到<a href="http://www.orionwang.com,即访问/">www.orionwang.com，即访问</a> <a href="https://orionwang.com/">https://orionwang.com</a> 跳转到 <a href="https://www.orionwang.com/">https://www.orionwang.com</a> 。<br>下面记录我是如何配置的。</p><h3 id="1-进入cloudflare的域名管理页面，添加访问记录"><a href="#1-进入cloudflare的域名管理页面，添加访问记录" class="headerlink" title="1. 进入cloudflare的域名管理页面，添加访问记录"></a>1. 进入cloudflare的域名管理页面，添加访问记录</h3><p><img src="https://raw.githubusercontent.com/Alanrk/blogimg/main/20240713104251.png"></p><p><strong>点击管理&gt;更新DNS配置</strong></p><p><img src="https://raw.githubusercontent.com/Alanrk/blogimg/main/20240713104531.png"></p><p><strong>点击添加记录</strong></p><p><img src="https://raw.githubusercontent.com/Alanrk/blogimg/main/20240713104840.png"></p><p><strong>类型选A，名称填@，IPV4地址因为我没有服务器，填8.8.8.8 或者 1.1.1.1都行，点击保存；</strong></p><p><img src="https://raw.githubusercontent.com/Alanrk/blogimg/main/20240713134242.png"></p><h3 id="2-点击页面规则，创建页面规则，按照下面的格式填写保存即可。"><a href="#2-点击页面规则，创建页面规则，按照下面的格式填写保存即可。" class="headerlink" title="2. 点击页面规则，创建页面规则，按照下面的格式填写保存即可。"></a>2. 点击页面规则，创建页面规则，按照下面的格式填写保存即可。</h3><p><img src="https://raw.githubusercontent.com/Alanrk/blogimg/main/20240713134408.png"><br><img src="https://raw.githubusercontent.com/Alanrk/blogimg/main/20240713134332.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;我的博客的域名是 &lt;a href=&quot;http://www.orionwang.com/&quot;&gt;www.orionwang.com&lt;/a&gt; ，我想让用户在地址栏输入 orionwang.com 时也能自动跳转到&lt;a href=&quot;http://www.orionwang.com,即</summary>
      
    
    
    
    
    <category term="域名管理" scheme="https://www.orionwang.com/tags/%E5%9F%9F%E5%90%8D%E7%AE%A1%E7%90%86/"/>
    
    <category term="博客搭建" scheme="https://www.orionwang.com/tags/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"/>
    
  </entry>
  
  <entry>
    <title>豆包Mac客户端的一些体验问题和想法</title>
    <link href="https://www.orionwang.com/posts/%E8%B1%86%E5%8C%85MAC%E5%AE%A2%E6%88%B7%E7%AB%AF%E7%9A%84%E4%B8%80%E4%BA%9B%E4%BD%93%E9%AA%8C%E9%97%AE%E9%A2%98%E5%92%8C%E6%83%B3%E6%B3%95/"/>
    <id>https://www.orionwang.com/posts/%E8%B1%86%E5%8C%85MAC%E5%AE%A2%E6%88%B7%E7%AB%AF%E7%9A%84%E4%B8%80%E4%BA%9B%E4%BD%93%E9%AA%8C%E9%97%AE%E9%A2%98%E5%92%8C%E6%83%B3%E6%B3%95/</id>
    <published>2024-07-11T22:51:14.000Z</published>
    <updated>2024-08-15T15:53:02.345Z</updated>
    
    <content type="html"><![CDATA[<p>在推上看到豆包发布Mac客户端的消息，下载简单体验后发了一条推吐槽了下，没想到豆包客户端的产品在推上留言询问我的一些体验槽点，下面就是我简单体验后，从我个人浏览器使用的角度说看到的一些问题以及不成文的建议，以下皆基于定位于浏览器的使用视角，有些问题只是提出问题，后续如果有更深的思考，再单独成文。</p><p>这里是电脑版的下载链接</p><p><a href="https://www.doubao.com/download/desktop">下载豆包客户端 - 激发创造力，即刻提升工作学习效率 (doubao.com)</a></p><ul><li><strong>首页体验问题</strong>：<br>用户打开浏览器，一般情况下有这么几种操作：<strong>访问固定的链接</strong>和<strong>搜索内容</strong>；</li></ul><p><img src="https://raw.githubusercontent.com/Alanrk/blogimg/main/Pasted%20image%2020240711215724.png"></p><p><strong>“访问固定链接” 的问题</strong>：这个功能在Chrome浏览器是以书签栏或者新标签页的快速链接形式来满足的。在豆包最新的版本以固定标签页的形式解决了部分问题，但是受限于横向的空间的限制，这个解决方案可能不太优雅，特别是在用户有稍微多一点的固定链接的时候，横向的空间就有限制了；我更偏向的是arc的竖向组织形式。如果采用类似arc的竖向组织形式，可以让AI的对话和正常的浏览tap整合在一起；</p><p><img src="https://raw.githubusercontent.com/Alanrk/blogimg/main/20240712125202.png"></p><p><strong>搜索内容的问题：</strong> 目前豆包是靠豆包问问、AI搜索、和第三方搜索引擎来支撑用户的搜索行为；</p><ul><li><p>首先使用<strong>豆包问问</strong>、<strong>AI搜索</strong>：我用同一个问题 <strong>“王刚版青椒炒肉“</strong>  问了<strong>豆包问问</strong> 和<strong>AI搜索</strong> ，下面是两个不同的回答，很明显是AI搜索的内容要更加丰盛且准确；但是对我来说不太理解豆包问问和AI搜索有什么区别，从我的角度，<strong>我不关心是问问的形式还是搜索的形式</strong>，我需要的是快速正确的答案：所以我建议<strong>豆包问问</strong> 和<strong>AI搜索</strong>能够统一，由AI自己来判断采用哪种技术的来应答用户的问题，而不是用户来选择；或者鼓励用户对提问质量进行评价；</p><p> 这是豆包问问</p></li></ul><p><img src="https://raw.githubusercontent.com/Alanrk/blogimg/main/Pasted%20image%2020240712091603.png"></p><p>这是AI搜索</p><p><img src="https://raw.githubusercontent.com/Alanrk/blogimg/main/Pasted%20image%2020240712092617.png"></p><ul><li><p><strong>使用第三方搜索引擎</strong>：可以看到同一个问题，在浏览器页面的结论和在豆包 chat里面是不一样的，只是提供了一个链接；<br><img src="https://raw.githubusercontent.com/Alanrk/blogimg/main/Pasted%20image%2020240712094522.png"></p><p> 这里我想提几个个建议：</p><p> a：是否可以大胆一点直接把豆包ai搜索的结果放到搜索列表中去，而不是在侧边栏，现在的展示还是插件的形式；</p><p> b：另外现在ai搜索是在页面加载完成后才逐步加载的，是否可以在用户输入框中输入的时候提前响应；</p><p> c：在搜索列表中，加入类似 arc快速总结页面的功能，帮助用户在第三方搜索引擎列表中快速筛选；</p></li><li><p><strong>AI的入口太多</strong>：除了首页。在其他页面出现的入口有顶部的ai总结、侧边的悬浮按钮、以及右上角的豆包问问，建议去掉顶部的ai总结，目前悬浮按钮的常用功能已经覆盖，且去掉AI总结后给顶部的空间更多，后续的一些ai能力和功能拓展可以在顶部展现；</p></li><li><p><strong>AI看视屏功能响应慢</strong>：下方截屏响应太慢，且建议和右面助手的功能整合到一起，针对视频网站播放页面做特殊的页面展示，不是和助手割裂；</p></li></ul><p><img src="https://raw.githubusercontent.com/Alanrk/blogimg/main/Pasted%20image%2020240712104400.png"></p><ul><li><p><strong>鼠标划线</strong>：浏览器插件的收藏网页和划线文字的收藏的区分，收藏网页需要和书签功能整合，收藏文字类似于 edge的集锦，收藏网页则是书签的功能；这里ai搜索和解释也需要做整合，一个入口就好；<br><img src="https://raw.githubusercontent.com/Alanrk/blogimg/main/Pasted%20image%2020240710093220.png"></p></li><li><p><strong>启动页面定制化</strong>：现在只是把自己的功能罗列给用户，建议在第一次启动时引导用户进行定制；<br><img src="https://raw.githubusercontent.com/Alanrk/blogimg/main/Pasted%20image%2020240710093703.png"></p></li><li><p><strong>搜索框内容补全</strong>：输入网址或者一些常见的品牌名时，能够在输入框自动的补全网址，且在候选搜索列表中显示网站图标和网站链接，辅助用户判断；<br> <img src="https://raw.githubusercontent.com/Alanrk/blogimg/main/Pasted%20image%2020240712111137.png"></p></li></ul><p><img src="https://raw.githubusercontent.com/Alanrk/blogimg/main/Pasted%20image%2020240712110724.png"></p><p><img src="https://raw.githubusercontent.com/Alanrk/blogimg/main/Pasted%20image%2020240712110805.png"></p><p><img src="https://raw.githubusercontent.com/Alanrk/blogimg/main/Pasted%20image%2020240712110913.png"></p><ul><li><p><strong>划词翻译准确性</strong>：划词翻译时能够获取词语在当前网页中的上下文信息，左侧是 kimi，Kimi在上下文中理解的更好；<br><img src="https://raw.githubusercontent.com/Alanrk/blogimg/main/Pasted%20image%2020240710142200.png"></p></li><li><p><strong>网页搜索在聊天中继续没有继续响应</strong>；</p></li></ul><p><img src="https://raw.githubusercontent.com/Alanrk/blogimg/main/Pasted%20image%2020240710210909.png"></p><ul><li><strong>PDF总结和翻译基本无法使用</strong>：点击AI总结反应很慢，点击翻译无反应，且头部的AI总结和侧边栏的问问豆包重复；建议针对pdf和其它文件的形式，建议专门做特殊优化，比如使用本地的模型翻译，pdf的双语对照翻译等；</li></ul><p><img src="https://raw.githubusercontent.com/Alanrk/blogimg/main/Pasted%20image%2020240711214113.png"></p><p><img src="https://raw.githubusercontent.com/Alanrk/blogimg/main/Pasted%20image%2020240711214224.png"></p><p><strong>最后我关于AI时代浏览器的期望：浏览器时是用户获取信息的一个窗口，在AI的加持下，用户能够更快速、更简单、更准确、更全面（跨语言场景、跨信息载体）的获取信息，且能够自动的完成一定的任务。</strong></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;在推上看到豆包发布Mac客户端的消息，下载简单体验后发了一条推吐槽了下，没想到豆包客户端的产品在推上留言询问我的一些体验槽点，下面就是我简单体验后，从我个人浏览器使用的角度说看到的一些问题以及不成文的建议，以下皆基于定位于浏览器的使用视角，有些问题只是提出问题，后续如果有更</summary>
      
    
    
    
    
    <category term="产品体验" scheme="https://www.orionwang.com/tags/%E4%BA%A7%E5%93%81%E4%BD%93%E9%AA%8C/"/>
    
  </entry>
  
  <entry>
    <title>Hexo-theme-onenote</title>
    <link href="https://www.orionwang.com/posts/Hexo-theme-onenote/"/>
    <id>https://www.orionwang.com/posts/Hexo-theme-onenote/</id>
    <published>2024-06-16T08:33:50.000Z</published>
    <updated>2024-08-15T15:52:15.683Z</updated>
    
    <content type="html"><![CDATA[<p>这里是专注阅读和写作的 Hexo 主题  “ onenote ” 。极简风格，在原 Hexo 主题 “ one-paper ”  基础上修改而来。专注于提供良好的阅读体验，保持轻量和视觉的干净，希望给访客带来良好的阅读体验。</p><p><img src="https://github.com/Alanrk/hexo-theme-one_note/raw/main/source/img/screen.jpg" alt="img"></p><h3 id="主题地址"><a href="#主题地址" class="headerlink" title="主题地址"></a>主题地址</h3><p><a href="https://github.com/Alanrk/hexo-theme-onenote">Alanrk&#x2F;hexo-theme-onenote: 专注于提供良好的阅读体验的hexo博客主题 (github.com)</a></p><h3 id="支持功能"><a href="#支持功能" class="headerlink" title="支持功能"></a>支持功能</h3><h4 id="继承自“one-paper”的内容"><a href="#继承自“one-paper”的内容" class="headerlink" title="继承自“one-paper”的内容"></a>继承自“one-paper”的内容</h4><ul><li>响应式设计，兼容手机端、pad 端以及 PC 端；</li><li>支持所有现代浏览器；</li><li>Markdown 常用格式支持；</li><li>代码高亮、行数显示支持；</li><li>目前版本支持的模版页：首页、文章详情页、归档页、单页；</li></ul><h4 id="“onenote”修改内容"><a href="#“onenote”修改内容" class="headerlink" title="“onenote”修改内容"></a>“onenote”修改内容</h4><ul><li>主页视觉调整：调整主页背景颜色、内容区尺寸、字号、行高；文章列表新增标签显示；footer 部分版权显示自动获取当前年份；</li><li>文章详情页调整：调整文章字号和版式，使之更适合阅读；增加文章标签显示；返回按钮由顶部调整到页面底部；</li><li>归档页调整：调整归档页页面样式，增加按照年份倒排的归档列表，使归档页重点更突出；</li><li>新增标签云页：增加标签云页面，点击标签，可查看该标签的所有文章；</li><li>代码高亮样式调整：统一代码高亮样式，增加复制代码按钮；</li><li>删除 “one-paper”内置第三方字体；</li><li>支持文章置顶设置；</li></ul><p>以上调整在 chatgpt的支持下完成（毕竟我只是一个只能看懂部分 HTML 和 css的经验的人）。</p><h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><ol><li>下载 zip 压缩包并解压将文件夹命名为 onenote；</li><li>复制 onenote 到 hexo&#x2F;themes 目录下；</li><li>更改博客根目录_config.yml 配置：<code>theme: onenote</code>；</li><li>终端切换到博客目录，输入<code>hexo server</code> 预览效果。</li></ol><h4 id="文章置顶"><a href="#文章置顶" class="headerlink" title="文章置顶"></a>文章置顶</h4><ol><li>在需要置顶的文章的 front-matter 中添加一个 sticky 属性，并设定其值。例如：</li></ol><p><img src="https://github.com/Alanrk/hexo-theme-onenote/raw/main/source/img/Snipaste_2024-06-20_22-44-31.png" alt="img"><br>2. 注意：sticky 的值越大，优先级越高。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;这里是专注阅读和写作的 Hexo 主题  “ onenote ” 。极简风格，在原 Hexo 主题 “ one-paper ”  基础上修改而来。专注于提供良好的阅读体验，保持轻量和视觉的干净，希望给访客带来良好的阅读体验。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https:/</summary>
      
    
    
    
    
    <category term="Hexo主题" scheme="https://www.orionwang.com/tags/Hexo%E4%B8%BB%E9%A2%98/"/>
    
  </entry>
  
</feed>
